{"ast":null,"code":"var _jsxFileName = \"C:\\\\Full Stack Assignment\\\\job-portal\\\\src\\\\pages\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Navbar from '../components/Navbar';\nimport FilterBar from '../components/FilterBar';\nimport JobList from '../components/JobList';\nimport axios from 'axios'; // Add axios for HTTP requests\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [loading, setLoading] = useState(true); // To handle loading state\n  const [error, setError] = useState(null); // To handle errors\n\n  useEffect(() => {\n    // Make the GET request to your Django API endpoint\n    axios.get('http://localhost:8000/api/jobs/') // Replace with your actual Django API URL\n    .then(response => {\n      setJobs(response.data); // Set the fetched jobs data\n      console.log(\"API RESPONSE\", response.data);\n      setLoading(false); // Set loading to false when data is fetched\n    }).catch(err => {\n      setError('Failed to fetch jobs.'); // Handle any errors\n      setLoading(false); // Set loading to false in case of error\n    });\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(FilterBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(JobList, {\n        jobs: jobs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"TaMk7fC+hMP36HC9VvgGyvmwP10=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","FilterBar","JobList","axios","jsxDEV","_jsxDEV","Home","_s","jobs","setJobs","loading","setLoading","error","setError","get","then","response","data","console","log","catch","err","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Full Stack Assignment/job-portal/src/pages/Home.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Navbar from '../components/Navbar';\r\nimport FilterBar from '../components/FilterBar';\r\nimport JobList from '../components/JobList';\r\nimport axios from 'axios';  // Add axios for HTTP requests\r\n\r\nconst Home = () => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [loading, setLoading] = useState(true);  // To handle loading state\r\n  const [error, setError] = useState(null);  // To handle errors\r\n\r\n  useEffect(() => {\r\n    // Make the GET request to your Django API endpoint\r\n    axios.get('http://localhost:8000/api/jobs/') // Replace with your actual Django API URL\r\n      .then((response) => {\r\n        setJobs(response.data);  // Set the fetched jobs data\r\n        console.log(\"API RESPONSE\",response.data);\r\n        \r\n        setLoading(false);  // Set loading to false when data is fetched\r\n      })\r\n      .catch((err) => {\r\n        setError('Failed to fetch jobs.');  // Handle any errors\r\n        setLoading(false);  // Set loading to false in case of error\r\n      });\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      <div>\r\n      <FilterBar />\r\n      <JobList jobs={jobs} />\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;EAC/C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;;EAE3CC,SAAS,CAAC,MAAM;IACd;IACAI,KAAK,CAACW,GAAG,CAAC,iCAAiC,CAAC,CAAC;IAAA,CAC1CC,IAAI,CAAEC,QAAQ,IAAK;MAClBP,OAAO,CAACO,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAE;MACzBC,OAAO,CAACC,GAAG,CAAC,cAAc,EAACH,QAAQ,CAACC,IAAI,CAAC;MAEzCN,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;IACtB,CAAC,CAAC,CACDS,KAAK,CAAEC,GAAG,IAAK;MACdR,QAAQ,CAAC,uBAAuB,CAAC,CAAC,CAAE;MACpCF,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;IACtB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,IAAID,OAAO,EAAE;IACX,oBAAOL,OAAA;MAAAiB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,IAAId,KAAK,EAAE;IACT,oBAAOP,OAAA;MAAAiB,QAAA,EAAMV;IAAK;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAC3B;EAEA,oBACErB,OAAA;IAAAiB,QAAA,gBACEjB,OAAA,CAACL,MAAM;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVrB,OAAA;MAAAiB,QAAA,gBACAjB,OAAA,CAACJ,SAAS;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACbrB,OAAA,CAACH,OAAO;QAACM,IAAI,EAAEA;MAAK;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEH,CAAC;AAEV,CAAC;AAACnB,EAAA,CAtCID,IAAI;AAAAqB,EAAA,GAAJrB,IAAI;AAwCV,eAAeA,IAAI;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}